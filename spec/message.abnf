message           = simple-message / complex-message

simple-message    = [simple-start pattern]
simple-start      = simple-start-char / escaped-char / placeholder
pattern           = *(text-char / escaped-char / placeholder)
placeholder       = expression / markup

complex-message   = *(declaration owsp) complex-body
declaration       = input-declaration / local-declaration / reserved-statement
complex-body      = quoted-pattern / matcher

input-declaration = input owsp variable-expression
local-declaration = local wsp variable owsp "=" owsp expression

quoted-pattern    = "{{" pattern "}}"
                  / %x2066 "{{" pattern "}}" %x2069

matcher           = match-statement 1*(owsp variant)
match-statement   = match 1*(owsp selector)
selector          = expression
variant           = key *(wsp key) owsp quoted-pattern
key               = literal / "*"

; Expressions
expression            = "{" (literal-expression / variable-expression / annotation-expression) "}"
                      / "{" %x2066 (literal-expression / variable-expression / annotation-expression) %x2069 "}"
literal-expression    = owsp literal [wsp annotation] *(wsp attribute) owsp
variable-expression   = owsp variable [wsp annotation] *(wsp attribute) owsp
annotation-expression = owsp annotation *(wsp attribute) owsp

annotation            = function
                      / private-use-annotation
                      / reserved-annotation

markup                = "{" markup-body "}"
                      / "{" %x2066 markup-body %x2069 "}"

markup-body          = owsp "#" identifier *(wsp option) *(wsp attribute) owsp ["/"]  ; open and standalone
                     / owsp "/" identifier *(wsp option) *(wsp attribute) owsp        ; close

; Expression and literal parts
function       = ":" identifier *(wsp option)
option         = identifier owsp "=" owsp (literal / variable)
; Attributes are reserved for future standardization
attribute      = "@" identifier [owsp "=" owsp (literal / variable)]

variable       = "$" name
literal        = quoted / unquoted
quoted         = "|" *(quoted-char / escaped-char) "|"
unquoted       = name / number-literal
; number-literal matches JSON number (https://www.rfc-editor.org/rfc/rfc8259#section-6)
number-literal = ["-"] (%x30 / (%x31-39 *DIGIT)) ["." 1*DIGIT] [%i"e" ["-" / "+"] 1*DIGIT]

; Keywords; Note that these are case-sensitive
input = %s".input"
local = %s".local"
match = %s".match"

; Reserve additional .keywords for use by future versions of this specification.
reserved-statement = reserved-keyword [s reserved-body] 1*(owsp expression)
; Note that the following production is a simplification,
; as this rule MUST NOT be considered to match existing keywords
; (`.input`, `.local`, and `.match`).
reserved-keyword   = "." name

; Reserve additional sigils for use by future versions of this specification.
reserved-annotation       = reserved-annotation-start [[s] reserved-body]
reserved-annotation-start = "!" / "%" / "*" / "+" / "<" / ">" / "?" / "~"

; Reserve sigils for private-use by implementations.
private-use-annotation    = private-start [[s] reserved-body]
private-start             = "^" / "&"
reserved-body             = *(owsp 1*(reserved-char / escaped-char / quoted))


; Names and identifiers
; identifier matches https://www.w3.org/TR/REC-xml-names/#NT-QName
; name matches https://www.w3.org/TR/REC-xml-names/#NT-NCName but excludes U+FFFD
identifier = [namespace ":"] name
namespace  = name
name       = name-start *name-char
name-start = ALPHA / "_"
           / %xC0-D6 / %xD8-F6 / %xF8-2FF
           / %x370-37D / %x37F-1FFF / %x200C-200D
           / %x2070-218F / %x2C00-2FEF / %x3001-D7FF
           / %xF900-FDCF / %xFDF0-FFFC / %x10000-EFFFF
name-char  = name-start / DIGIT / "-" / "."
           / %xB7 / %x300-36F / %x203F-2040

; Restrictions on characters in various contexts
simple-start-char = content-char / s / "@" / "|"
text-char         = content-char / s / "." / "@" / "|"
quoted-char       = content-char / s / "." / "@" / "{" / "}"
reserved-char     = content-char / "."
content-char      = %x01-08        ; omit NULL (%x00), HTAB (%x09) and LF (%x0A)
                  / %x0B-0C        ; omit CR (%x0D)
                  / %x0E-1F        ; omit SP (%x20)
                  / %x21-2D        ; omit . (%x2E)
                  / %x2F-3F        ; omit @ (%x40)
                  / %x41-5B        ; omit \ (%x5C)
                  / %x5D-7A        ; omit { | } (%x7B-7D)
                  / %x7E-2FFF      ; omit IDEOGRAPHIC SPACE (%x3000)
                  / %x3001-D7FF    ; omit surrogates
                  / %xE000-10FFFF

; Character escapes
escaped-char = backslash ( backslash / "{" / "|" / "}" )
backslash    = %x5C ; U+005C REVERSE SOLIDUS "\"

; bidi controls
; LRM / RLM / LRI / RLI / FSI / PDI
bidi = %x200E / %x200F / %x2066-2069

; optional whitespace
owsp = *( s / bidi )

; required whitespace
wsp = [ bidi ] 1*s [ bidi ]

; whitespace characters
s = ( SP / HTAB / CR / LF / %x3000 )
